swagger: '2.0'
info:
  title: User Signup API
  version: 1.0.0
  description: API for user signup
host: localhost:3000
basePath: /api
schemes:
  - http
paths:
  /auth/signUp:
    post:
      summary: Sign up a new user
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Authentication
      parameters:
        - in: body
          name: userData
          description: User details
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                description: User's name
              email:
                type: string
                format: email
                description: User's email address
              password:
                type: string
                format: password
                description: User's password
              age:
                type: integer
                description: User's age
              gender:
                type: string
                enum: [male, female, other]
                description: User's gender
      responses:
        '201':
          description: User signed up successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                description: Indicates if signup was successful
              message:
                type: string
                description: Message indicating successful signup
        '400':
          description: Bad request. Invalid input data
        '500':
          description: Internal server error. Something went wrong
  /auth/activate:
    post:
      summary: Activate user account
      description: Activates a user account using email and OTP.
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Authentication
      parameters:
        - name: body
          in: body
          description: Request body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                description: Email address of the user.
              otp:
                type: string
                description: One-time password sent to the user.
      responses:
        '200':
          description: Account activated successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                description: Indicates whether the operation was successful.
                example: true
              message:
                type: string
                description: A message indicating the result of the operation.
                example: Account activated successfully
        '400':
          description: Bad request
        '403':
          description: Forbidden - Invalid OTP
        '404':
          description: Not Found - User not found

  /auth/signIn:
    post:
      summary: Sign in to the application
      description: Signs in a user using email and password.
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Authentication
      parameters:
        - name: body
          in: body
          description: Request body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                description: Email address of the user.
              password:
                type: string
                description: User password.
      responses:
        '200':
          description: Successful sign-in
          schema:
            type: object
            properties:
              userId:
                type: string
                description: ID of the signed-in user.
                example: "123456"
              role:
                type: string
                description: Role of the signed-in user.
                example: "user"
              email:
                type: string
                format: email
                description: Email address of the signed-in user.
                example: "user@example.com"
              name:
                type: string
                description: Name of the signed-in user.
                example: "John Doe"
              activated:
                type: boolean
                description: Indicates whether the user account is activated.
                example: true
              token:
                type: string
                description: Authentication token for the signed-in user.
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: Bad request - Mandatory fields missing
        '401':
          description: Unauthorized - Invalid credentials
        '404':
          description: Not Found - User not found

  /profile:
    get:
      summary: Retrieve user profile
      description: |
        Retrieves the profile details of a user.
      tags:
        - Profile
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successful response
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              details:
                type: object
                properties:
                  name:
                    type: string
                  creationDate:
                    type: string
                    format: date-time
                  email:
                    type: string
                  age:
                    type: integer
                  gender:
                    type: string
        404:
          description: User not found
  /notification:
    get:
      summary: Get notifications
      description: Retrieves notifications for the current user
      produces:
        - application/json
      security:
        - BearerAuth: []
      tags:
        - Notification
      responses:
        200:
          description: Successfully retrieved notifications
          schema:
            type: object
            properties:
              notifications:
                type: array
                items:
                  type: object
                  properties:
                    userId:
                      type: string
                      description: ID of the user who received the notification
                    title:
                      type: string
                      description: Title of the notification
                    info:
                      type: string
                      description: Additional information for the notification
                    viewed:
                      type: boolean
                      description: Indicates if the notification has been viewed
                    timeStamp:
                      type: string
                      format: date-time
                      description: Timestamp when the notification was created
        500:
          description: Internal server error
  /notification/read:
    post:
      summary: Mark a notification as viewed
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - BearerAuth: []
      tags:
        - Notification
      parameters:
        - name: notificationId
          in: body
          description: ID of the notification to mark as viewed
          required: true
          schema:
            type: object
            properties:
              notificationId:
                type: string
      responses:
        '200':
          description: Notification marked as viewed successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: Notification read successfully
        '400':
          description: No notification found
        '500':
          description: Internal server error

  /cart/add/{productId}:
    post:
      summary: Add product to cart
      description: Adds a product to the user's cart
      parameters:
        - name: productId
          in: path
          description: ID of the product to add to the cart
          required: true
          type: string
      tags:
        - Cart
      security:
        - BearerAuth: []
      responses:
        200:
          description: Product added to cart successfully
          schema:
            $ref: '#/definitions/Cart'
        404:
          description: Product not found
  /cart/decrement/{productId}:
    put:
      summary: Decrement item quantity in cart
      description: Decrements the quantity of a product in the user's cart
      parameters:
        - name: productId
          in: path
          description: ID of the product to decrement in the cart
          required: true
          type: string
      tags:
        - Cart
      security:
        - BearerAuth: []
      responses:
        200:
          description: Item quantity decremented successfully
          schema:
            $ref: '#/definitions/Cart'
        404:
          description: Product not found in cart
  /cart/remove-item/{productId}:
    delete:
      summary: Remove item from cart
      description: Removes a product from the user's cart
      parameters:
        - name: productId
          in: path
          description: ID of the product to remove from the cart
          required: true
          type: string
      tags:
        - Cart
      security:
        - BearerAuth: []
      responses:
        200:
          description: Item removed from cart successfully
          schema:
            $ref: '#/definitions/Cart'
        404:
          description: Product not found in cart
  /cart/clear:
    delete:
      summary: Clear user's cart
      description: Removes all items from the user's cart
      tags:
        - Cart
      security:
        - BearerAuth: []
      responses:
        200:
          description: Cart cleared successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Cart cleared successfully
        404:
          description: Cart not found
  /cart/view:
    get:
      summary: View user's cart
      description: Retrieves the current user's cart
      tags:
        - Cart
      security:
        - BearerAuth: []
      responses:
        200:
          description: Cart retrieved successfully
          schema:
            $ref: '#/definitions/Cart'
        404:
          description: Cart not found

  /product-ratings/rate/{productId}:
    post:
      summary: Rate a product
      description: Rate a product and optionally leave a review
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Product Rating
      security:
        - BearerAuth: []
      parameters:
        - name: productId
          in: path
          description: ID of the product to rate
          required: true
          type: string
        - in: body
          name: ratingData
          description: Rating details
          required: true
          schema:
            type: object
            properties:
              rating:
                type: number
                description: Rating value (1 to 5)
                minimum: 1
                maximum: 5
              review:
                type: string
                description: Review for the product (optional)
      responses:
        '200':
          description: Product rated successfully
          schema:
            type: object
            properties:
              message:
                type: string
                description: Message indicating successful rating

  /product-ratings/update/{productId}:
    put:
      summary: Update product rating
      description: Update the rating and review of a product
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Product Rating
      security:
        - BearerAuth: []
      parameters:
        - name: productId
          in: path
          description: ID of the product to update rating
          required: true
          type: string
        - in: body
          name: updatedRatingData
          description: Updated rating details
          required: true
          schema:
            type: object
            properties:
              rating:
                type: number
                description: New rating value (1 to 5)
                minimum: 1
                maximum: 5
              review:
                type: string
                description: New review for the product
      responses:
        '200':
          description: Rating updated successfully
          schema:
            type: object
            properties:
              message:
                type: string
                description: Message indicating successful rating update

  /product-ratings/get/{productId}:
    get:
      summary: Get product rating details
      description: Retrieve the rating details for a product
      produces:
        - application/json
      tags:
        - Product Rating
      security:
        - BearerAuth: []
      parameters:
        - name: productId
          in: path
          description: ID of the product to get rating details
          required: true
          type: string
      responses:
        '200':
          description: Rating details retrieved successfully
          schema:
            $ref: '#/definitions/ProductRatingDetails'
        '404':
          description: Product rating not found

  /seller:
    post:
      summary: Sign up as a seller
      description: |
        Sign up as a seller for selling products. This endpoint is used after the user completes the normal authentication sign up from the User-Management Service.
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - BearerAuth: []
      tags:
        - Seller
      parameters:
        - in: header
          name: X-User-Id
          type: string
          required: true
          description: User ID obtained from the authentication sign up
        - in: body
          name: body
          description: Seller sign up details
          required: true
          schema:
            type: object
            properties:
              companyName:
                type: string
                description: Name of the company or business
              phoneNo:
                type: string
                description: Phone number of the seller
              address:
                type: string
                description: Address of the seller
              pinCode:
                type: string
                description: Pin code or postal code of the seller's address
      responses:
        201:
          description: Seller signed up successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: Upgraded to Seller successfully
        400:
          description: Bad request, seller already exists or missing required fields
        500:
          description: Internal server error
    get:
      produces:
        - application/json
      security:
        - BearerAuth: []
      tags:
        - Seller
      responses:
        201:
          description: Seller signed up successfully
          schema:
            type: object
            properties:
              companyName:
                type: string
                description: Name of the company or business
              phoneNo:
                type: string
                description: Phone number of the seller
              address:
                type: string
                description: Address of the seller
              pinCode:
                type: string
                description: Pin code or postal code of the seller's address
        400:
          description: Bad request, seller already exists or missing required fields
        500:
          description: Internal server error
          
definitions:
  Cart:
    type: object
    properties:
      userId:
        type: string
      items:
        type: array
        items:
          $ref: '#/definitions/CartItem'
      total:
        type: number
      modifiedOn:
        type: string
  CartItem:
    type: object
    properties:
      productId:
        type: string
      name:
        type: string
      price:
        type: number
      quantity:
        type: number
      imageUrl:
        type: string
  ProductRatingDetails:
    type: object
    properties:
      totalRatings:
        type: integer
        description: Total number of ratings for the product
      totalReviews:
        type: integer
        description: Total number of reviews for the product
      averageRating:
        type: number
        description: Average rating of the product
      reviews:
        type: array
        description: List of reviews for the product
        items:
          type: object
          properties:
            userId:
              type: string
              description: ID of the user who provided the review
            review:
              type: string
              description: Review text provided by the user
securityDefinitions:
  BearerAuth:
    type: apiKey
    name: Authorization
    in: header
    description: Use 'Bearer <token>' format
